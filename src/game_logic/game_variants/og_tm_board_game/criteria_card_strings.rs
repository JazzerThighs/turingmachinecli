pub fn criteria_card_strings() -> Vec<String> {
    let mut vec_criteria_cards: Vec<String> = vec![];
    
    vec_criteria_cards.push(String::from("This verifier verifies... the Blue number compared to 1:\n\nI:    Blue == 1;\nII:   Blue > 1;"));
    vec_criteria_cards.push(String::from("This verifier verifies... the Blue number compared to 3:\n\nI:    Blue < 3;\nII:   Blue == 3;\nIII:  Blue > 3;"));
    vec_criteria_cards.push(String::from("This verifier verifies... the Yellow number compared to 3:\n\nI:    Yellow < 3;\nII:   Yellow == 3;\nIII:  Yellow > 3;"));
    vec_criteria_cards.push(String::from("This verifier verifies... the Yellow number compared to 4:\n\nI:    Yellow < 4;\nII:   Yellow == 4;\nIII:  Yellow > 4;"));
    vec_criteria_cards.push(String::from("This verifier verifies... if Blue is even or odd:\n\nI:    Blue is even;\nII:   Blue is odd;"));
    vec_criteria_cards.push(String::from("This verifier verifies... if Yellow is even or odd:\n\nI:    Yellow is even;\nII:   Yellow is odd;"));
    vec_criteria_cards.push(String::from("This verifier verifies... if Purple is even or odd:\n\nI:    Purple is even;\nII:   Purple is odd;"));
    vec_criteria_cards.push(String::from("This verifier verifies... the number of 1's in the code:\n\nI:    zero 1's;\nII:   one 1;\nIII:  two 1's;\nIV:   three 1's;"));
    vec_criteria_cards.push(String::from("This verifier verifies... the number of 3's in the code:\n\nI:    zero 3's;\nII:   one 3;\nIII:  two 3's;\nIV:   three 3's;"));
    vec_criteria_cards.push(String::from("This verifier verifies... the number of 4's in the code:\n\nI:    zero 4's;\nII:   one 4;\nIII:  two 4's;\nIV:   three 4's;"));
    vec_criteria_cards.push(String::from("This verifier verifies... the Blue number compared to the Yellow number:\n\nI:    Blue < Yellow;\nII:   Blue == Yellow;\nIII:  Blue > Yellow;"));
    vec_criteria_cards.push(String::from("This verifier verifies... the Blue number compared to the Purple number:\n\nI:    Blue < Purple;\nII:   Blue == Purple;\nIII:  Blue > Purple;"));
    vec_criteria_cards.push(String::from("This verifier verifies... the Yellow number compared to the Purple number:\n\nI:    Yellow < Purple;\nII:   Yellow == Purple;\nIII:  Yellow > Purple;"));
    vec_criteria_cards.push(String::from("This verifier verifies... which color's number is smaller than either of the others:\n\nI:    Blue < Yellow && Blue < Purple;\nII:   Yellow < Blue && Yellow < Purple;\nIII:  Purple < Blue && Purple < Yellow;"));
    vec_criteria_cards.push(String::from("This verifier verifies... which color's number is larger than either of the others:\n\nI:    Blue > Yellow && Blue > Purple;\nII:   Yellow > Blue && Yellow > Purple;\nIII:  Purple > Blue && Purple > Yellow;"));
    vec_criteria_cards.push(String::from("This verifier verifies... the number of even numbers compared to the number of odd numbers:\n\nI:    even > odd;\nII:   even < odd;"));
    vec_criteria_cards.push(String::from("This verifier verifies... how many even numbers there are in the code:\n\nII:   one even number;\nIII:  two even numbers;\nIV:   three even numbers;"));
    vec_criteria_cards.push(String::from("This verifier verifies... if the sum of all the numbers is even or odd:\n\nI:    Blue + Yellow + Purple == even;\nII:   Blue + Yellow + Purple == odd;"));
    vec_criteria_cards.push(String::from("This verifier verifies... the sum of Blue and Yellow compared to 6:\n\nI:    Blue + Yellow < 6;\nII:   Blue + Yellow == 6;\nIII:  Blue + Yellow > 6;"));
    vec_criteria_cards.push(String::from("This verifier verifies... if a number repeats itself in the code:\n\nI:    a triple number;\nII:   a double number;\nIII:  no repetition;"));
    vec_criteria_cards.push(String::from("This verifier verifies... if there is a number present exactly twice:\n\nI:    no pairs || three of a kind;\nII:   a pair;"));
    vec_criteria_cards.push(String::from("This verifier verifies... if the three numbers in the code are in ascending order, descending order, or no order:\n\nI:    ascending order;\nII:   descending order;\nIII:  no order;"));
    vec_criteria_cards.push(String::from("This verifier verifies... the sum of all numbers compared to 6:\n\nI:    Blue + Yellow + Purple < 6;\nII:   Blue + Yellow + Purple == 6;\nIII:  Blue + Yellow + Purple < 6;"));
    vec_criteria_cards.push(String::from("This verifier verifies... if there is a sequence of ascending numbers:\n\nI:    three numbers in ascending order;\nII:   two numbers in ascending order;\nIII:  no numbers in ascending order;"));
    vec_criteria_cards.push(String::from("This verifier verifies... if there is a sequence of ascending or descending numbers:\n\nI:    three numbers in ascending or descending order;\nII:   two numbers in ascending or descending order;\nIII:  no numbers in ascending or descending order;"));
    vec_criteria_cards.push(String::from("This verifier verifies... that a specific color is less than 3:\n\nI:    Blue < 3;\nII:   Yellow < 3;\nIII:  Purple < 3;"));
    vec_criteria_cards.push(String::from("This verifier verifies... that a specific color is less than 4:\n\nI:    Blue < 4;\nII:   Yellow < 4;\nIII:  Purple < 4;"));
    vec_criteria_cards.push(String::from("This verifier verifies... that a specific color is equal to 1:\n\nI:    Blue == 1;\nII:   Yellow == 1;\nIII:  Purple == 1;"));
    vec_criteria_cards.push(String::from("This verifier verifies... that a specific color is equal to 3:\n\nI:    Blue == 3;\nII:   Yellow == 3;\nIII:  Purple == 3;"));
    vec_criteria_cards.push(String::from("This verifier verifies... that a specific color is equal to 4:\n\nI:    Blue == 4;\nII:   Yellow == 4;\nIII:  Purple == 4;"));
    vec_criteria_cards.push(String::from("This verifier verifies... that a specific color is greater than 1:\n\nI:    Blue > 1;\nII:   Yellow > 1;\nIII:  Purple > 1;"));
    vec_criteria_cards.push(String::from("This verifier verifies... that a specific color is greater than 3:\n\nI:    Blue > 3;\nII:   Yellow > 3;\nIII:  Purple > 3;"));
    vec_criteria_cards.push(String::from("This verifier verifies... that a specific color is even or odd:\n\nI:    Blue is even;\nII:   Blue is odd;\nIII:  Yellow is even;\nIV:   Yellow is odd;\nV:    Purple is even;\nVI:   Purple is odd;"));
    vec_criteria_cards.push(String::from("This verifier verifies... which color has the smallest number (or is tied for the smallest number):\n\nI:    Blue <= Yellow && Blue <= Purple;\nII:   Yellow <= Blue && Yellow <= Purple;\nIII:  Purple <= Blue && Purple <= Yellow;"));
    vec_criteria_cards.push(String::from("This verifier verifies... which color has the largest number (or is tied for the largest number):\n\nI:    Blue >= Yellow && Blue >= Purple;\nII:   Yellow >= Blue && Yellow >= Purple;\nIII:  Purple >= Blue && Purple >= Yellow;"));
    vec_criteria_cards.push(String::from("This verifier verifies... the sum of all the numbers is a multiple of 3 or 4 or 5:\n\nI:    Blue + Yellow + Purple % 3 == 0;\nII:   Blue + Yellow + Purple % 4 == 0;\nIII:  Blue + Yellow + Purple % 5 == 0;"));
    vec_criteria_cards.push(String::from("This verifier verifies... the sum of two specific colors is equal to 4:\n\nI:    Blue + Yellow == 4;\nII:   Blue + Purple == 4;\nIII:  Yellow + Purple == 4;"));
    vec_criteria_cards.push(String::from("This verifier verifies... the sum of two specific colors is equal to 6:\n\nI:    Blue == 1;\nII:   Blue > 1;\nIII:  Yellow == 1;\nIV:   Yellow > 1;\nV:    Purple == 1;\nVI:   Purple > 1;"));
    vec_criteria_cards.push(String::from("This verifier verifies... the number of one specific color compared to 1:\n\nI:    Blue == 1;\nII:   Blue > 1;\nIII:  Yellow == 1;\nIV:   Yellow > 1;\nV:    Purple == 1;\nVI:   Purple > 1;"));
    vec_criteria_cards.push(String::from("This verifier verifies... the number of one specific color compared to 3:\n\nI:    Blue < 3;\nII:   Blue == 3;\nIII:  Blue > 3;\nIV:   Yellow < 3;\nV:    Yellow == 3;\nVI:   Yellow > 3;\nVII:  Purple < 3;\nVIII: Purple == 3;\nIX:   Purple > 3;"));
    vec_criteria_cards.push(String::from("This verifier verifies... the number of one specific color compared to 4:\n\nI:    Blue < 4;\nII:   Blue == 4;\nIII:  Blue > 4;\nIV:   Yellow < 4;\nV:    Yellow == 4;\nVI:   Yellow > 4;\nVII:  Purple < 4;\nVIII: Purple == 4;\nIX:   Purple > 4;"));
    vec_criteria_cards.push(String::from("This verifier verifies... which color is the smallest or the largest:\n\nI:    Blue < Yellow && Blue < Purple;\nII:   Blue > Yellow && Blue > Purple;\nIII:  Yellow < Blue && Yellow < Purple;\nIV:   Yellow > Blue && Yellow > Purple;\nV:    Purple < Blue && Purple < Yellow;\nVI:   Purple > Blue && Purple > Yellow;"));
    vec_criteria_cards.push(String::from("This verifier verifies... the Blue number compared to the number of another specific color:\n\nI:    Blue < Yellow;\nII:   Blue < Purple;\nIII:  Blue == Yellow;\nIV:   Blue == Purple;\nV:    Blue > Yellow;\nVI:   Blue > Purple;"));
    vec_criteria_cards.push(String::from("This verifier verifies... the Yellow number compared to the number of another specific color:\n\nI:    Yellow < Blue;\nII:   Yellow < Purple;\nIII:  Yellow == Blue;\nIV:   Yellow == Purple;\nV:    Yellow > Blue;\nVI:   Yellow > Purple;"));
    vec_criteria_cards.push(String::from("This verifier verifies... how many 1's or how many 3's there are in the code:\n\nI:    zero 1's;\nII:   zero 3's;\nIII:  one 1;\nIV:   one 3;\nV:    two 1's;\nVI:   two 3's;"));
    vec_criteria_cards.push(String::from("This verifier verifies... how many 3's or how many 4's there are in the code:\n\nI:    zero 3's;\nII:   zero 4's;\nIII:  one 3;\nIV:   one 4;\nV:    two 3's;\nVI:   two 4's;"));
    vec_criteria_cards.push(String::from("This verifier verifies... how many 1's or how many 4's there are in the code:\n\nI:    zero 1's;\nII:   zero 4's;\nIII:  one 1;\nIV:   one 4;\nV:    two 1's;\nVI:   two 4's;"));
    vec_criteria_cards.push(String::from("This verifier verifies... one specific color compared to another specific color:\n\nI:    Blue < Yellow;\nII:   Blue == Yellow;\nIII:  Blue > Yellow;\nIV:   Blue < Purple;\nV:    Blue == Purple;\nVI:   Blue > Purple;\nVII:  Yellow < Purple;\nVIII: Yellow == Purple;\nIX:   Yellow > Purple;"));

    return vec_criteria_cards;
}